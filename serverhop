-- hi skid

local function parseTimeUnit(timeString)
    local timeValue, timeUnit = timeString:match("(%d+)%s?(%a+)")
    timeValue = tonumber(timeValue)
    if timeUnit and timeValue then
        timeUnit = timeUnit:lower()
        local unitValues = {
            seconds = 1,
            minutes = 60,
            hours = 3600
        }
        local unitMultiplier = unitValues[timeUnit]
        if unitMultiplier then
            return timeValue * unitMultiplier
        end
    end
    return nil
end

local startserverhop = getgenv().serverhop

spawn(function()
    local hopTime = parseTimeUnit(getgenv().serverhoptime) or 3

    while startserverhop do
        wait(hopTime)
        local success, module = pcall(function()
            local AllIDs = {}
            local foundAnything = ""
            local actualHour = os.date("!*t").hour
            local S_T = game:GetService("TeleportService")
            local S_H = game:GetService("HttpService")

            local function TPReturner(placeId)
                local Site;
                if foundAnything == "" then
                    Site = S_H:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. placeId .. '/servers/Public?sortOrder=Asc&limit=100'))
                else
                    Site = S_H:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. placeId .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
                end
                local ID = ""
                if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
                    foundAnything = Site.nextPageCursor
                end
                local num = 0;
                for i,v in pairs(Site.data) do
                    local Possible = true
                    ID = tostring(v.id)
                    if tonumber(v.maxPlayers) > tonumber(v.playing) then
                        for _,Existing in pairs(AllIDs) do
                            if num ~= 0 then
                                if ID == tostring(Existing) then
                                    Possible = false
                                end
                            else
                                if tonumber(actualHour) ~= tonumber(Existing) then
                                    local delFile = pcall(function()
                                        delfile("server-hop-temp.json")
                                        AllIDs = {}
                                        table.insert(AllIDs, actualHour)
                                    end)
                                end
                            end
                            num = num + 1
                        end
                        if Possible == true then
                            table.insert(AllIDs, ID)
                            wait()
                            pcall(function()
                                writefile("server-hop-temp.json", S_H:JSONEncode(AllIDs))
                                wait()
                                S_T:TeleportToPlaceInstance(placeId, ID, game.Players.LocalPlayer)
                            end)
                            wait(4)
                        end
                    end
                end
            end

            local module = {}

            function module:Teleport(placeId)
                while wait() do
                    pcall(function()
                        TPReturner(placeId)
                        if foundAnything ~= "" then
                            TPReturner(placeId)
                        end
                    end)
                end
            end

            return module
        end)

        if success then
            module:Teleport(game.PlaceId)
        end
    end
end)
